#!/usr/bin/env python

import argparse
import os
import sys

import numpy as np
import pandas as pd


def parse_args():
    parser = argparse.ArgumentParser(
        description="This script takes Orthogroups.csv file from running "
        "orthofinder and create a new CSV file containing max amount of 128 "
        "OG rows that has at least specified THRESHOLD % of the columns "
        "with exactly 1 sequence ID listed in that OG row’s cell. "
        "This script also create another CSV file containing the rest of OG "
        "rows from Orthogroups.csv and replace each cell with the # of "
        "sequence IDs presented in that cell. "
        "At the end of each row, 2 columns are added to store the column "
        "numbers and ratio of species with exactly 1 sequence ID in that row",
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("input_path",
                        help="path to Orthogroups.csv file "
                             "generated by orthofinder")
    parser.add_argument("-t", "--threshold", metavar="THRESHOLD",
                        type=float, default=1.0,
                        help='''\
                             Proportion threshold for filtering orthogroups
                             0 < THRESHOLD <= 1.0
                             DEFAULT: 1.0
                             ''')
    args = parser.parse_args()

    # check if Orthogroups.csv exists
    if not os.path.isfile(args.input_path):
        print(f"Error: {args.input_path} does not exist")
        sys.exit()

    if not (args.threshold > 0 and args.threshold <= 1.0):
        print("Error: Proportion threshold needs to be > 0 and <= 1.0")
        sys.exit()

    return args


def get_2_dataframes():
    # this function returns 2 new DataFrames for us to create CSV files

    # add a column to store % of species in a OG row that has 1 seq id
    df['single_copy_proportion'] = 0.0
    proportion_col_index = len(df.columns) - 1

    # add a column to store column index of
    # species that has only 1 seq id in an OG row
    # https://stackoverflow.com/a/31469249/3250423
    df['cols_with_single_seq_id'] = np.empty((len(df), 0)).tolist()
    single_seq_id_col_index = len(df.columns) - 1

    for og_row in range(orthogroups_count - 1):
        og_row_data = df.iloc[og_row]
        columns_notnull = og_row_data.notnull()

        cols_with_1_seq_id = []

        # iterate through columns/species
        for column in range(1, species_count + 1):
            # if non-empty cell
            if columns_notnull[column]:
                # if cell contains only 1 sequence id, i.e no ","
                if og_row_data[column].find(",") == -1:
                    cols_with_1_seq_id.append(column)
        single_copy_proportion = len(cols_with_1_seq_id) / species_count

        if single_copy_proportion >= THRESHOLD:
            df.iat[og_row, proportion_col_index] = single_copy_proportion
            # only add for -ge? Depends on what we want to do with -lt result
            df.iat[og_row, single_seq_id_col_index] = cols_with_1_seq_id

    df.sort_values(by=['single_copy_proportion'],
                   ascending=False,
                   inplace=True)

    ogs_meet_criteria_df = df[df['single_copy_proportion']
                              >= THRESHOLD]
    orthogroups_meet_criteria_count = len(ogs_meet_criteria_df)

    print(f"There are {orthogroups_meet_criteria_count} OGs having >= "
          f"{str(THRESHOLD)} of the columns with exactly 1 sequence ID "
          f"in that OG row’s cell. ")

    # keep max of 128(RAxML default gene limit) OG rows in ogs_meet_criteria_df
    if orthogroups_meet_criteria_count == 0:
        print(f"Found no orthogroup meeting "
              f"specified {str(THRESHOLD)} threshold.")
    elif orthogroups_meet_criteria_count > 128:
        print(f"Only 128 OGs will be included in output \n "
              f"{FILE_IN}.{THRESHOLD}.")
        ogs_meet_criteria_df = ogs_meet_criteria_df.iloc[0:128, :]
        rest_of_df = df.iloc[128:, :]
    else:
        rest_of_df = df.iloc[orthogroups_meet_criteria_count:, :]

    return ogs_meet_criteria_df, rest_of_df


def get_df_for_dendropy_kaks(df):
    # this function puts gene count in cell and
    # screens for orthogroups which were presented in one or more taxa
    # but that did not exceed 25% of the total incorporated taxa
    df_og_count = len(df)

    df['null_proportion'] = 0.0
    null_proportion_index = len(df.columns) - 1

    for og_row in range(df_og_count):
        og_row_data = df.iloc[og_row]
        columns_notnull = og_row_data.notnull()

        not_null_count = 0

        # iterate through columns/species
        for column in range(1, species_count + 1):
            # if non-empty cell
            if columns_notnull[column]:
                not_null_count += 1
                comma_count_in_cell = str(og_row_data[column]).count(",")

                if comma_count_in_cell != 0:
                    seq_id_count_in_cell = comma_count_in_cell + 1
                else:
                    seq_id_count_in_cell = 1

                # replace cell with seq_id_count_in_cell
                df.iat[og_row, column] = seq_id_count_in_cell
            else:
                # put 0 in cell
                df.iat[og_row, column] = 0

        null_proportion = (species_count - not_null_count) / species_count

        if null_proportion >= NULL_RATIO:
            df.iat[og_row, null_proportion_index] = null_proportion

    # keep OGs presented in one or more species but
    # that exceed 25% of the total incorporated taxa
    dendropy_kaks_df = df[df['null_proportion'] >= NULL_RATIO]

    return dendropy_kaks_df


args = parse_args()
FILE_IN = args.input_path
THRESHOLD = args.threshold
MAX_SELECTED_OG_ROWS = 128
NULL_RATIO = 0.75

print(f"THRESHOLD = {THRESHOLD}")

# read CSV data into a Pandas DataFrame
df = pd.read_csv(FILE_IN, delimiter="\t")
orthogroups_count = len(df)
species_count = len(df.columns) - 1

print(f"\nFinished reading CSV file {FILE_IN}\n"
      f"df.shape={df.shape}\n"
      f"orthogroups_count={orthogroups_count}\n"
      f"species_count={species_count}\n")

# get DataFrames for OG rows meeting THRESHOLD(max #128) and
# get the rest of DataFrame and store in rest_of_df
orthogroups_meet_criteria_df, rest_of_df = get_2_dataframes()

# replace each "cell" in rest_of_df with sequence ID count and
# do some filtering in function get_df_for_dendropy_kaks
df_for_dendropy_kaks = get_df_for_dendropy_kaks(rest_of_df)
df_for_dendropy_kaks.sort_values(by=['null_proportion'],
                                 ascending=False,
                                 inplace=True)

# write 2 CSV files out
orthogroups_meet_criteria_df.to_csv(f"{FILE_IN}.{THRESHOLD}.csv",
                                    index=False, header=True)
print(f"\nFinished writing {len(orthogroups_meet_criteria_df)} OG rows to "
      f"{FILE_IN}.{THRESHOLD}\n")

df_for_dendropy_kaks.to_csv(f"{FILE_IN}.{THRESHOLD}_for_dendropy_kaks.csv",
                            index=False, header=True)
print(f"Finished writing {len(df_for_dendropy_kaks)} OG rows to "
      f"{FILE_IN}.{THRESHOLD}_for_dendropy_kaks.csv\n")
